// ============================================
// CONFIGURACIÓN DE PRISMA
// ============================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ============================================
// MODELO DE USUARIO
// ============================================
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  googleId  String   @unique
  email     String   @unique
  name      String
  avatarUrl String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ✅ Relación existente: Mensajes del muro público
  messages  Message[]
  
  // ✨ Relaciones de mensajería privada
  sentDirectMessages     DirectMessage[] @relation("SentMessages")
  receivedDirectMessages DirectMessage[] @relation("ReceivedMessages")
}

// ============================================
// MENSAJES DEL MURO PÚBLICO
// ============================================
model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  
  @@index([createdAt(sort: Desc)]) // ← Para cargar mensajes recientes del muro
}

// ============================================
// ✨ MENSAJERÍA PRIVADA (OPTIMIZADA)
// ============================================

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastMessageAt DateTime @default(now())
  
  // ✅ Array de IDs de participantes (MongoDB way)
  participantIds String[] @db.ObjectId
  
  // Mensajes dentro de esta conversación
  messages DirectMessage[]
  
  // ✨ ÍNDICES OPTIMIZADOS
  @@index([participantIds, lastMessageAt(sort: Desc)])
  @@index([lastMessageAt(sort: Desc)])
}

model DirectMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  
  // Conversación a la que pertenece
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @db.ObjectId
  
  // Quién envió el mensaje
  sender   User   @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String @db.ObjectId
  
  // Quién recibe el mensaje
  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String @db.ObjectId
  
  // Estado de lectura
  isRead Boolean  @default(false)
  readAt DateTime?
  
  // ✨ ÍNDICES COMPUESTOS PARA PERFORMANCE
  @@index([conversationId, createdAt(sort: Desc)])
  @@index([receiverId, isRead])
  @@index([conversationId, receiverId, isRead])
  @@index([senderId, createdAt(sort: Desc)])
}

// ============================================
// NOTAS SOBRE LOS ÍNDICES
// ============================================
// 1. Message: Índice en createdAt para queries del muro
// 2. Conversation: Índices para buscar conversaciones del usuario
// 3. DirectMessage: Múltiples índices para:
//    - Cargar mensajes de una conversación ordenados
//    - Contar mensajes no leídos por usuario
//    - Marcar conversaciones como leídas
//    - Queries de mensajes enviados por usuario
//
// Ejecutar después de guardar:
// npx prisma generate
// npx prisma db push